import{_ as i,c as l,I as t,l as e,a,D as o,o as c}from"./chunks/framework.-k5mHVah.js";const G=JSON.parse('{"title":"API 文档系统","description":"","frontmatter":{"status":"尚未完成"},"headers":[],"relativePath":"笔记/✍️ 文档工程/API 文档系统.md","filePath":"笔记/✍️ 文档工程/API 文档系统.md"}'),_={name:"笔记/✍️ 文档工程/API 文档系统.md"},d=e("h1",{id:"api-文档系统",tabindex:"-1"},[a("API 文档系统 "),e("a",{class:"header-anchor",href:"#api-文档系统","aria-label":'Permalink to "API 文档系统"'},"​")],-1),h=e("h2",{id:"说明",tabindex:"-1"},[a("说明 "),e("a",{class:"header-anchor",href:"#说明","aria-label":'Permalink to "说明"'},"​")],-1),p=e("p",null,"一个能够追踪 API 响应对象中的字段在「什么时候」、「什么版本」、「什么提交」里面新增或者发生变更，甚至是提供即将废弃的注解。",-1),P=e("p",null,"在开发的时候期间，Staging 过渡阶段，FAT 特性验收测试阶段，UAT 用户可接受度测试阶段是没办法很好的记录到版本号的，可能得根据提交记录和提交时间来完成，否则开发者得把 API 版本和后端版本剥离，并分别进行记录。不过在我看来，记录版本号、剥离版本号并记录的任意一种方案，甚至是记录提交这类的事情不应该是 API 接口开发者应该做的，应当在 API 定义发生变更之后由 API 文档系统自动变更版本号并且在文档中正确渲染和提示到使用用户。",-1),m=e("p",null,"可能的情况下，该系统甚至能提供一些 DevOps 联动，在必要的情况下可以允许文档系统提示该字段所处的阶段，比如能展示到 Staging 阶段或者是 Production 阶段。",-1),b=e("p",null,"可能的情况下，该系统还应该提示 beta / experiment API 注解高亮说明，并建议「为生产产品开发的开发者：尽可能避免使用正处于 beta / experiment 的 API，这些 API 可能随时发生变更，暂时不稳定，并采用其他替代方案实现」。",-1),A=e("h2",{id:"贡献者",tabindex:"-1"},[a("贡献者 "),e("a",{class:"header-anchor",href:"#贡献者","aria-label":'Permalink to "贡献者"'},"​")],-1),I=e("h2",{id:"文件历史",tabindex:"-1"},[a("文件历史 "),e("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function u(f,g,x,N,k,C){const s=o("NolebasePageProperties"),n=o("NolebaseGitContributors"),r=o("NolebaseGitChangelog");return c(),l("div",null,[d,t(s),h,p,P,m,b,A,t(n),I,t(r)])}const $=i(_,[["render",u]]);export{G as __pageData,$ as default};
